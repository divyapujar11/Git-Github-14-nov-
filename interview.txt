OOPS CONCEPTS:

Object means a real-world entity such as a pen, chair, table, computer, watch, etc. 
Object-Oriented Programming is a methodology or paradigm to design a program using 
classes and objects. It simplifies software development and maintenance by providing 
some concepts:

Object- Object
Java Object
Any entity that has state and behavior is known as an object. For example, a chair, pen,
 table, keyboard, bike, etc. It can be physical or logical.

Class- Collection of objects is called class. It is a logical entity

Inheritance- When one object acquires all the properties and behaviors of a parent object, it is known as inheritance. It provides code reusability. 
It is used to achieve runtime polymorphism.

Polymorphism -If one task is performed in different ways, it is known as polymorphism.
 For example: to convince the customer differently, to 
draw something, for example, shape, triangle, rectangle, etc.
In Java, we use method overloading and method overriding to achieve polymorphism.

Run-Time Polymorphism: Whenever an object is bound with the functionality at run time, this 
is known as runtime polymorphism. The runtime polymorphism can be achieved by method 
overriding. 


Compile Time Polymorphism: Whenever an object is bound with their functionality at the 
compile-time, this is known as the compile-time polymorphism. ... So this is called 
compile-time polymorphism or static or early binding


Abstraction- Hiding internal details and showing functionality is known as abstraction. 
For example phone call, we don't know the internal processing.

Encapsulation-Binding (or wrapping) code and data together into a single unit are known
 as encapsulation. For example, a capsule, it is wrapped with different medicines.

A java class is the example of encapsulation. Java bean is the fully encapsulated 
class because all the data members are private here.

METHOD-OVERLOADING 
Overloading allows different methods to have the same name, but different 
signatures where the signature can differ by the number of input parameters 
or type of input parameters or both. Overloading is related to compile-time 
(or static) polymorphism.

METHOD-OVERRIDING

Overriding is a feature that allows a subclass or child class to provide a 
specific implementation of a method that is already provided by one of its 
super-classes or parent classes. When a method in a subclass has the same name, 
same parameters or signature, and same return type(or sub-type) as a method in its 
super-class, then the method in the subclass is said to override the method in the 
super-class. Method overriding is one of the way by which java achieve Run Time Polymorphism.


Spring makes programming Java quicker, easier, and safer for everybody. Spring's focus on speed, 
simplicity, and productivity has made it the world's most popular Java framework.


Java has five significant types of memory allocations.
* Class Memory
* Heap Memory
* Stack Memory
* Program Counter-Memory
* Native Method Stack Memory

How many types of memory areas are allocated by JVM?
Many types:
1. Class(Method) Area: Class Area stores per-class structures such as the runtime constant pool, 
field, method data, and the code for methods.
2. Heap: It is the runtime data area in which the memory is allocated to the objects
3. Stack: Java Stack stores frames. It holds local variables and partial results, and plays 
a part in method invocation and return. Each thread has a private JVM stack, created at the same 
time as the thread. A new frame is created each time a method is invoked. A frame is destroyed when its method invocation completes.
4. Program Counter Register: PC (program counter) register contains the address of the Java virtual 
machine instruction currently being executed.
5. Native Method Stack: It contains all the native methods used in the application.

Define Wrapper Classes in Java.

In Java, when you declare primitive datatypes, then Wrapper classes are responsible for converting 
them into objects(Reference types). 


Differentiate between instance and local variables.

For instance, variables are declared inside a class, and the scope is limited to only a specific object.
A local variable can be anywhere inside a method or a specific block of code. Also, the scope is 
limited to the code segment where the variable is declared.

What is an Exception?

An Exception in Java is considered an unexpected event that can disrupt the program's normal flow. 
These events can be fixed through the process of Exception Handling.

* Checked Exception: Checked exceptions are the one which are checked at compile-time. 
For example, SQLException, ClassNotFoundException, etc.
* Unchecked Exception: Unchecked exceptions are the one which are handled at runtime because they 
can not be checked at compile-time. For example, ArithmaticException, NullPointerException, ArrayIndexOutOfBoundsException, etc.
* Error: Error cause the program to exit since they are not recoverable. For Example, OutOfMemoryError, AssertionError, etc.

The "finally" block is used to execute the important code of the program. I
t is executed whether an exception is handled or not. In other words, we can say that finally 
block is the block which is always executed.

The throw keyword is used to throw an exception explicitly

The throws keyword is used to declare an exception


The term final is a predefined word in Java that is used while declaring values to variables. 
When a value is declared using the final keyword, then the variable's value remains constant throughout the program's execution.

Difference Between == and .equals() Method in Java

Both equals() method and the == operator are used to compare two objects in Java. 
== is an operator and equals() is method. 
But == operator compares reference or memory location of objects in a heap, whether they point to the same location or not.

We can use == operators for reference comparison (address comparison) and .equals() method for content comparison. 

Explain ‘this’ and ‘super’ keyword in Java.

The term "this" is a particular keyword designated as a reference keyword. The "this" keyword is 
used to refer to the current class properties like method, instance, variable, and constructors.

The term "super" is a particular keyword designated as a reference keyword. The "super" keyword 
refers to the immediate parent class object.


What are the various access specifiers in Java

- [ ] Public The classes, methods, or variables which are defined as public, can be accessed by any class or method.
* Protected Protected can be accessed by the class of the same package, or by the sub-class of this class, or within the same class.
* Default Default are accessible within the package only. By default, all the classes, methods, and variables are of default scope.
* Private The private class, methods, or variables defined as private can be accessed within the class only.


What is the purpose of static methods and variables?
The methods or variables defined as static are shared among all the objects of the class. The static is the part of the class and not of the object.

The static variables are stored in the class area, and we do not need to create the object to access such variables. 
Therefore, static is used in the case, where we need to define variables or methods which are common to all the objects of the class.

The static variable is used to refer to the common property of all objects (that is not unique for each object), e.g., 
The company name of employees, college name of students, etc. Static variable gets memory only once in the class area 
at the time of class loading. Using a static variable makes your program more memory efficient (it saves memory). 
Static variable belongs to the class rather than the object.